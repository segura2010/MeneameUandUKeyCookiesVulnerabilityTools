#include <omp.h>
#include <iostream>
#include <unistd.h>

#include "includes/md5.h"


using namespace std;

void clearConsole()
{
    for (int i = 0; i < 250; i++)
    {
        cout << endl;
    }
}

void bruteforceHash(long long int start, long long int end, string toHash, string expectedHash, int threads, bool isByUserId)
{

	long long int progress[threads]; // to show the progress for each thread
	long long int finished[threads];
	long long int hashByThread = (end - start) / (threads - 1);

	#pragma omp parallel for
	for(int t=0;t<threads;t++)
	{
		progress[t] = 0;
		finished[t] = false;
		if(t+1 == threads)
		{	// Progress thread
			finished[t] = true;
			for(;;)
			{
				bool allFinished = true;
				for(int tt=0;tt<threads;tt++)
				{
					allFinished = allFinished && finished[tt];
					long long int rStart = (tt*hashByThread) + start;
					long long int rEnd = rStart + hashByThread;
					float percent = ((double)progress[tt] / (double)hashByThread) * 100;
					cout << "\nThread " << tt << ": " << percent << " % (" << progress[tt] << " hashes checked) ["<< rStart <<","<< rEnd <<"]";
				}
				if(allFinished)
				{
					cout << "\nAll finished! exiting.." << endl;
					exit(0);
				}
				// Every 10 seconds show progress
				sleep(10);
				clearConsole();
			}
		}

		long long int rStart = (t*hashByThread) + start;
		long long int rEnd = rStart + hashByThread;

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"]";

		for(long long int i=rStart;i<rEnd;i++)
		{
			string actualToHash = toHash + to_string(i); // to_string for c++11
			string actualHash = md5(actualToHash);
			if(isByUserId)
			{
				actualHash = actualHash.substr(0, 8);
			}
			
			if(actualHash == expectedHash)
			{
				cout << "\nFound: " << i << endl;
				exit(0);
			}
			progress[t]++;
		}

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"] FINISHED";

		finished[t] = true;
	}

}


void bruteforceHashByUserId(long long int start, long long int end, string toHash, string expectedHash, int threads)
{
	bruteforceHash(start, end, toHash, expectedHash, threads, true);
}

void bruteforceHashByCommentKey(long long int start, long long int end, string toHash, string expectedHash, int threads)
{
	bruteforceHash(start, end, toHash, expectedHash, threads, false);
}

