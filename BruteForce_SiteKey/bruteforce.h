#include <omp.h>
#include <iostream>

#include "includes/md5.h"


using namespace std;

void bruteforceHash(long long int start, long long int end, string toHash, string expectedHash, int threads, bool isByUserId)
{

	long long int hashByThread = (end - start) / (threads - 1);

	#pragma omp parallel for
	for(int t=0;t<threads;t++)
	{
		long long int rStart = (t*hashByThread) + start;
		long long int rEnd = rStart + hashByThread;

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"]";

		for(long long int i=rStart;i<rEnd;i++)
		{
			string actualToHash = toHash + to_string(i); // to_string for c++11
			string actualHash = md5(actualToHash);
			if(isByUserId)
			{
				actualHash = actualHash.substr(0, 8);
			}
			
			if(actualHash == expectedHash)
			{
				cout << "\nFound: " << i << endl;
				exit(0);
			}
		}

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"] FINISHED";
	}

}


void bruteforceHashByUserId(long long int start, long long int end, string toHash, string expectedHash, int threads)
{
	bruteforceHash(start, end, toHash, expectedHash, threads, true);
}

void bruteforceHashByCommentKey(long long int start, long long int end, string toHash, string expectedHash, int threads)
{
	bruteforceHash(start, end, toHash, expectedHash, threads, false);
}

