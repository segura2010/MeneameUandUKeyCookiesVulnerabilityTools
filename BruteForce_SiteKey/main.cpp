#include <omp.h>
#include <iostream>

#include "includes/md5.h"


using namespace std;

int main(int argc, char * argv[])
{

	
	if( argc < 7 )
	{
		cout << "Usage: " << argv[0] << " user_id timestamp expected_hash start_number end_number threads" << endl;
		exit(0);
	}
	

	// parse arguments
	string uid = argv[1];
	string timestamp = argv[2];
	string expectedHash = argv[3];

	string toHash = uid + uid + timestamp;
	long long int start = atoll(argv[4]); //225568318;
	long long int end = atoll(argv[5]); //2147483647;
	int threads = atoi(argv[6]);
	// Set threads number for parallel code
	omp_set_num_threads(threads);

	long long int hashByThread = (end - start) / (threads - 1);

	#pragma omp parallel for
	for(int t=0;t<threads;t++)
	{
		long long int rStart = (t*hashByThread) + start;
		long long int rEnd = rStart + hashByThread;

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"]";

		for(long long int i=rStart;i<rEnd;i++)
		{
			string actualToHash = toHash + to_string(i); // to_string for c++11
			string actualHash = md5(actualToHash).substr(0, 8);
			if(actualHash == expectedHash)
			{
				cout << "\nFound: " << i << endl;
				exit(0);
			}
		}

		#pragma omp critical
		cout << "\nThread " << t << ": ["<< rStart <<","<< rEnd <<"] FINISHED";
	}

}

